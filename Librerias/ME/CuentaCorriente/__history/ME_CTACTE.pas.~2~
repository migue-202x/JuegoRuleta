

unit ME_CTACTE;

{

//Este ME utiliza:
//1)Archivo de almacen de datos donde se guardara la informacion

//2)Archivo de listas parciales donde se guardara la posicion de la informacion guardada en el almacen de datos y
    los enlaces de cada nodo de la lista parcial

//3)Archivo secuencial que tendra la clave hash y el registro de control de la lista parcial

//4)Archivo secuencial con la clave hash y una posicion que apuntara al archivo Nº3 segun la funcion hash indique

//Para poder insertar se pide el Nick que se traducira a una clave hash, se buscar esa clave hash en el Archivo Nº1 ese
//archivo me dara la posicion del reg de control en el archivo Nº2 con el registro de control de la lista podre insertar en la lista
//y a la vez en el almacen gusrdando la posicion del almacen en la lista.

--------------------


ME Cuenta Corriente utiliza:

1) Un archivo de datos donde se almacenan todos los movimientos de cada cuenta corriente

2) Una lista doble parcial que hará de indice sobre archivo almacen

3) Una tabla secuencial dinámica que hará de control sobre la lista parcial anterior mencionada

4) Una lista doble parcial de cuentas corrientes, que almacena todas las cuentas corrientes existentes y
que apunta a la tabla secuencial anteriormente mencionada

5) Un archivo estático (tabla hash) que tiene control sobre la lista cuentas corrientes anteriormente mencionada












Datos consigna:

CUENTAS.DAT (Seria Almacen):
  - Nick: string de 6 caracteres.
  - Fecha y Hora: campos que indican la fecha y hora de la operación
  - Concepto: String donde se identifica el tipo de operación. Por ejemplo:
      	Apuesta Juego No xxx
	      Compra de fichas
	      Premio Juego No yyy
  - Debe, Haber, Saldo: campos reales.
  - Resto de campos a definir según criterio del alumno y la elección del ME



CUENTAS.CON Sus campos mínimos son
  -importe mínimo
  -Resto de campos a definir según criterio del alumno y la elección del ME
}


interface

uses
 SysUtils,
 Type_Hash, Type_ALMACEN, LO_Hash, LO_ListaParcialDobleEnlace, Lib_Auxiliar;

Const
  _Directorio = 'Archivos\';

  _NombreArch_TablaHash = 'CUENTA.DAT';
  _NombreArch_LDCtaCte = 'LISTACUENTAS.CTE';
  _NombreArch_TablaIndMov = 'CONTROLINDICE.COX';
  _NombreArch_LDIndMov = 'INDICEALMACEN.NTX';
  _NombreArch_Almacen = 'ALMACEN.DAT';



type


  tipoEstructura = record
            //'Tabla hash' tiene control sobre la lista cuentas corrientes
            tablaHash: LO_Hash.Me_Hash;

            //'Lista cuentas corrientes' contiene todas las cuentas corrientes
            ListaCtasCtes: LO_ListaParcialDobleEnlace.TipoLdParcial;
           end;

  tipoDatos = record
            tablaControlIndice:LO_ListaParcialDobleEnlace.TipoArchivoControl;//tiene control sobre la 'lista doble indice almacen'
            ListaIndiceAlmacen:LO_ListaParcialDobleEnlace.TipoLdParcial;//Indice sobre 'slmacen'
            Almacen:Type_ALMACEN.tipoArchAlmacen; //Archivo secuencial. Se inserte siempre al final
           end;

  ME_CUENTA = record
            Estructura: tipoEstructura;
            Datos: tipoDatos;
           end;

  Procedure CrearMe_CtaCte (Var Me:ME_CUENTA);
  procedure AbrirMe_CtaCte       (var Me: ME_CUENTA);
  procedure CerrarMe_CtaCte      (var Me: ME_CUENTA);
  procedure DestruirMe_CtaCte (var Me: ME_CUENTA);
  Procedure InsertarCtaCte (var Me:ME_CUENTA; Clave:tClaveHash; var PosEnDatos:tPos);
  Function SaldoAcumulado (var me:ME_CUENTA; Clave: tclave): timporte;
  Procedure CapturarCtaCte(var Me:ME_CUENTA; Clave:tClaveHash; var Reg:tipoRegDatos);
  procedure CapturarAlmacen (var Me:ME_CUENTA; Pos:TPos; var Reg:TipoRegAlmacen);
  Procedure InsertarIndiceAlmacen(var Me:ME_CUENTA; Clave:tClaveHash; PosAlmacen:tPos);
  procedure CapturarTablaIndiceMov (var Me:ME_CUENTA; Pos:TPos; var Reg:TipoRegControl);
  procedure GrabarTablaIndiceMov (var Me:ME_CUENTA; Pos:TPos; Reg:TipoRegControl);
  Procedure InsertarAlmacen (var Me:ME_CUENTA; var RegAlmacen:tipoRegAlmacen);
  function PosNula (var Me:ME_CUENTA): TPos;
  function ProximoEnLdParcial (var Me:ME_CUENTA; Pos:TPos):TPos;
  Function PrimeroLdParcial(var Me:ME_CUENTA; Clave:tClaveHash):tPos;
  procedure CapturarEnAlmacen (var Me:ME_CUENTA; Pos:TPos; var Reg:TipoRegAlmacen);
  procedure Asignar(var Me:ME_CUENTA);


implementation

{------------------------------------------------------------------------------}

procedure Asignar(var Me:ME_CUENTA);
begin
  AssignFile(me.Estructura.tablaHash, _Directorio + _NombreArch_TablaHash);
  AssignFile(me.Estructura.ListaCtasCtes.D, _Directorio + _NombreArch_LDCtaCte);
  AssignFile(Me.Datos.tablaControlIndice, _Directorio + _NombreArch_TablaIndMov);
  AssignFile(me.Datos.ListaIndiceAlmacen.D, _Directorio + _NombreArch_LDIndMov);
  AssignFile(Me.Datos.Almacen, _Directorio + _NombreArch_Almacen);
end;

{------------------------------------------------------------------------------}

Procedure CrearMe_CtaCte (Var Me:ME_CUENTA);
Var
  FaltaAlmacen, FaltaIndice:Boolean;
Begin
  LO_Hash.Crear(Me.Estructura.tablaHash,_NombreArch_TablaHash,_Directorio);
  LO_ListaParcialDobleEnlace.CrearLdParcial(me.Estructura.ListaCtasCtes,_NombreArch_LDCtaCte,_Directorio);

  AssignFile(Me.Datos.tablaControlIndice,_Directorio + _NombreArch_TablaIndMov);//control indiceAlmacen
  {$i-}
  Reset(Me.Datos.tablaControlIndice);
  FaltaAlmacen:=(Ioresult<>0);
  If (FaltaAlmacen)  then
    begin
      Rewrite(Me.Datos.tablaControlIndice);
      close(me.Datos.tablaControlIndice);
    end;

    LO_ListaParcialDobleEnlace.CrearLdParcial(me.Datos.ListaIndiceAlmacen,_NombreArch_LDIndMov,_Directorio); //indiceAlmacen

    AssignFile(Me.Datos.Almacen,_Directorio + _NombreArch_Almacen);//datos almacen
    {$i-}
    Reset(Me.Datos.Almacen);
    FaltaAlmacen:=(Ioresult<>0);
    If (FaltaAlmacen)  then
      begin
        Rewrite(Me.Datos.Almacen);
        close(me.Datos.Almacen);
      end;
end;

{------------------------------------------------------------------------------}

procedure AbrirMe_CtaCte (var Me: ME_CUENTA);
begin
  Asignar(Me);
  LO_Hash.Abrir(Me.Estructura.tablaHash);
  LO_ListaParcialDobleEnlace.AbrirLDParcial(Me.Estructura.ListaCtasCtes);
  reset(me.Datos.tablaControlIndice);
  LO_ListaParcialDobleEnlace.AbrirLDParcial(me.Datos.ListaIndiceAlmacen);
  reset(me.Datos.Almacen);
end;

{------------------------------------------------------------------------------}

procedure CerrarMe_CtaCte (var Me: ME_CUENTA);
begin
  LO_Hash.Cerrar(Me.Estructura.tablaHash);
  LO_ListaParcialDobleEnlace.CerrarLDParcial(Me.Estructura.ListaCtasCtes);
  close(me.Datos.tablaControlIndice);
  LO_ListaParcialDobleEnlace.CerrarLDParcial(me.Datos.ListaIndiceAlmacen);
  close(me.Datos.Almacen);
end;

{------------------------------------------------------------------------------}

procedure DestruirMe_CtaCte  (var Me: ME_CUENTA);
begin
  LO_Hash.Destruir(Me.Estructura.tablaHash);
  LO_ListaParcialDobleEnlace.DestruirLdParcial(Me.Estructura.ListaCtasCtes);
  erase(me.Datos.tablaControlIndice);
  LO_ListaParcialDobleEnlace.DestruirLdParcial(me.Datos.ListaIndiceAlmacen);
  erase(me.Datos.Almacen);
end;

{------------------------------------------------------------------------------}

Procedure InsertarCtaCte (var Me:ME_CUENTA; Clave:tClaveHash; var PosEnDatos:tPos);
var
  RegHashControl:LO_ListaParcialDobleEnlace.TipoRegControl;
  RegCtaCte:LO_ListaParcialDobleEnlace.TipoRegDatos;
  posEnCtaCte, posClaveHash, pos, posLista, posUltimo:TPos;
  buscar:boolean;
  RegControlIndice:tipoRegControl;
begin
  RegCtaCte.Clave:=Clave;
  posClaveHash:=LO_Hash.FuncionHash(Clave);//Otengo posicion de la tabla Hash
  LO_Hash.Capturar(me.Estructura.tablaHash,posClaveHash,RegHashControl);//Obtengo contenido de la tabla Hash con la posicion parametrizada
  pos:=RegHashControl.primero;

  if (pos = Lib_Auxiliar.PosNula) then  //Si no existe el equipo
  begin
    LO_ListaParcialDobleEnlace.BuscarInfo_LdParcial(me.Estructura.ListaCtasCtes,Clave,PosLista, RegHashControl);
    //Antes de insertar RegCtaCte, voy a buscar su posEnTablaControlIndice (vengo de insertar un movimiento)
    posUltimo:=Filesize(me.Datos.tablaControlIndice);
    RegCtaCte.PosEnDatos:=posUltimo;
    PosEnDatos:=posUltimo;
    //-----------------------------------
    LO_ListaParcialDobleEnlace.InsertarInfo_LdParcial(me.Estructura.ListaCtasCtes,RegCtaCte,PosLista,RegHashControl);
    LO_Hash.modificar(me.Estructura.tablaHash, RegHashControl, posClaveHash);//actualizo cabecera tabla hash

    LO_ListaParcialDobleEnlace.InicializarCabecera(regControlIndice);
    GrabarTablaIndiceMov(me,posEnDatos,regControlIndice);

  end
  else //si no existe la CuentaCorriente...
      begin
          if not (LO_ListaParcialDobleEnlace.BuscarInfo_LdParcial(me.Estructura.ListaCtasCtes,Clave,PosLista, RegHashControl)) then
          begin
            buscar:=LO_ListaParcialDobleEnlace.BuscarInfo_LdParcial(me.Estructura.ListaCtasCtes,Clave,PosLista, RegHashControl);

            //Antes de insertar RegCtaCte ...
            posUltimo:=Filesize(me.Datos.tablaControlIndice);
            RegCtaCte.PosEnDatos:=posUltimo;
            PosEnDatos:=posUltimo;
            //...grabo registro en tabla indice de movimientos
            LO_ListaParcialDobleEnlace.InicializarCabecera(regControlIndice);
            GrabarTablaIndiceMov(me,posEnDatos,regControlIndice);

            LO_ListaParcialDobleEnlace.InsertarInfo_LdParcial(me.Estructura.ListaCtasCtes,RegCtaCte,PosLista,RegHashControl);
            LO_Hash.modificar(me.Estructura.tablaHash, RegHashControl, posClaveHash); //ACTUALIZO CABECERA TABLA HASH
          end
          else
              begin
                LO_ListaParcialDobleEnlace.CapturarInfo_LdParcial(me.Estructura.ListaCtasCtes,PosLista,RegCtaCte);
                PosEnDatos:=RegCtaCte.posEnDatos;
              end;
      end;
end;

{------------------------------------------------------------------------------}

Procedure InsertarAlmacen (var Me:ME_CUENTA; var RegAlmacen:tipoRegAlmacen);
var
  posAlmacen:tPos;
begin
  posAlmacen:=fileSize(me.Datos.Almacen);

  Seek(me.Datos.Almacen, PosAlmacen);
  write(me.Datos.Almacen, RegAlmacen);

  InsertarIndiceAlmacen(me, RegAlmacen.Nick, PosAlmacen);
end;

{------------------------------------------------------------------------------}

Procedure InsertarIndiceAlmacen(var Me:ME_CUENTA; Clave:tClaveHash; PosAlmacen:tPos);
var
  posEnDatos:tPos;
  PosLista:tPos;
  regCI, RegControlIndice:tipoRegControl;
  regIndiceAlmacen:tipoRegDatos;
begin
  //Invoco InsertarCtaCte por si no existe la cuenta. De todas formar me trae en PosEnDatos que le paso por referencia la posicion que apunta a la 'tabla indice movimientos'
  InsertarCtaCte(me, clave, posEnDatos);
  //Me paro en la tabla tablaControlIndice, y capturo ese registroControl
  CapturarTablaIndiceMov(me,posEnDatos,regControlIndice);
  //Preparo registro indice almacen antes de insertar
  regIndiceAlmacen.posEnDatos:=PosAlmacen;
  regIndiceAlmacen.Clave:=Clave;

  //Parametrizo en Buscar el registro control indice que esta en la tabla Indice Movimientos en esa posicion
  LO_ListaParcialDobleEnlace.BuscarInfo_LdParcial(me.Datos.ListaIndiceAlmacen,Clave,PosLista, RegControlIndice);
  LO_ListaParcialDobleEnlace.InsertarInfo_LdParcial(me.Datos.ListaIndiceAlmacen,regIndiceAlmacen,PosLista,RegControlIndice);

  //Actualizo cabecera tablba control indice
  GrabarTablaIndiceMov(me,posEnDatos,regControlIndice);
end;

{------------------------------------------------------------------------------}

Procedure CapturarCtaCte(var Me:ME_CUENTA; Clave:tClaveHash; var Reg:tipoRegDatos);
var
RegHashControl:LO_ListaParcialDobleEnlace.TipoRegControl;
posClaveHash, PosLista:TPos;

begin
  posClaveHash:=LO_Hash.FuncionHash(Clave);//Otengo posicion de la tabla Hash
  //capturo el registro control de la tabla hash
  LO_Hash.Capturar(me.Estructura.tablaHash,posClaveHash,RegHashControl);
  //Busco en 'lista doble parcial' parametrizando el registro control y capturo registro
  LO_ListaParcialDobleEnlace.BuscarInfo_LdParcial(me.Estructura.ListaCtasCtes,Clave,PosLista, RegHashControl);
  LO_ListaParcialDobleEnlace.CapturarInfo_LdParcial(me.Estructura.ListaCtasCtes,PosLista,Reg);
end;

{------------------------------------------------------------------------------}

procedure CapturarAlmacen (var Me:ME_CUENTA; Pos:TPos; var Reg:TipoRegAlmacen);
begin
    seek(me.Datos.Almacen,Pos);
    read(me.Datos.Almacen,Reg);
end;

{------------------------------------------------------------------------------}

//capturar registro en tabla indice de movimientos
procedure CapturarTablaIndiceMov (var Me:ME_CUENTA; Pos:TPos; var Reg:TipoRegControl);
begin
  seek(me.Datos.tablaControlIndice,pos);
  read(me.Datos.tablaControlIndice,Reg);
end;

{------------------------------------------------------------------------------}

//Grabo registro en tabla indice de movimientos
procedure GrabarTablaIndiceMov (var Me:ME_CUENTA; Pos:TPos; Reg:TipoRegControl);
var
  RegIndMov:tipoRegControl;
begin
  seek(me.Datos.tablaControlIndice,pos);
  write(me.Datos.tablaControlIndice,Reg);
end;

{------------------------------------------------------------------------------}

Function SaldoAcumulado  (var me:ME_CUENTA; Clave: tclave): timporte;
var
  debeacumulado, haberacumulado: timporte;
  regCtaCte,RegIndMovimiento:tipoRegDatos;
  pos,PosLista,i:Tpos;
  ClaveMayuscula:tClaveHash;
  regTablaIndice:tipoRegControl;
  RegAlm:TipoRegAlmacen;
begin
  ClaveMayuscula:= UpperCase(clave);
  CapturarCtaCte(me,ClaveMayuscula,regCtaCte);

  CapturarTablaIndiceMov(me,regCtaCte.PosEnDatos,regTablaIndice);

  i:=LO_ListaParcialDobleEnlace.Primero(me.Datos.ListaIndiceAlmacen, regTablaIndice);
  debeAcumulado:= 0;
  haberAcumulado:= 0;

  while (i<>Lib_Auxiliar.PosNula) do
  begin
      LO_ListaParcialDobleEnlace.CapturarInfo_LdParcial(me.Datos.ListaIndiceAlmacen,i,RegIndMovimiento);
      CapturarAlmacen(me,RegIndMovimiento.PosEnDatos,RegAlm);

      debeAcumulado:= debeAcumulado + RegAlm.Debe;
      haberAcumulado:= haberAcumulado + RegAlm.haber;

    i:=LO_ListaParcialDobleEnlace.Proximo(me.Datos.ListaIndiceAlmacen,i);
  end;
  SaldoAcumulado:= debeAcumulado-haberAcumulado;
end;

{------------------------------------------------------------------------------}

Procedure Capturar_InfoAlmacen(var Me:ME_CUENTA; Clave:tClaveHash; var RegAlm:TipoRegAlmacen);  ///
var
regCtaCte,RegIndMovimiento:tipoRegDatos;
ClaveMayuscula:tClaveHash;
regTablaIndice:tipoRegControl;
posLista:tPos;
begin
  ClaveMayuscula:= UpperCase(clave);
  CapturarCtaCte(me,ClaveMayuscula,regCtaCte);
  CapturarTablaIndiceMov(me,regCtaCte.PosEnDatos,regTablaIndice);
  LO_ListaParcialDobleEnlace.CapturarInfo_LdParcial(me.Datos.ListaIndiceAlmacen,posLista,RegIndMovimiento);
  CapturarAlmacen(me,RegIndMovimiento.PosEnDatos,RegAlm);
end;

{------------------------------------------------------------------------------}

Function PrimeroLdParcial(var Me:ME_CUENTA; Clave:tClaveHash):tPos;
var
regCtaCte,RegIndMovimiento:tipoRegDatos;
pos,PosLista,i:Tpos;
ClaveMayuscula:tClaveHash;
regTablaIndice:tipoRegControl;
RegAlm:TipoRegAlmacen;
begin
  ClaveMayuscula:= UpperCase(clave);
  CapturarCtaCte(me,ClaveMayuscula,regCtaCte);
  CapturarTablaIndiceMov(me,regCtaCte.PosEnDatos,regTablaIndice);

  PrimeroLdParcial:=LO_ListaParcialDobleEnlace.Primero(me.Datos.ListaIndiceAlmacen, regTablaIndice);
end;

{------------------------------------------------------------------------------}

procedure CapturarEnAlmacen (var Me:ME_CUENTA; Pos:TPos; var Reg:TipoRegAlmacen);
var
  RegIndMovimiento:tipoRegDatos;
begin
    LO_ListaParcialDobleEnlace.CapturarInfo_LdParcial(me.Datos.ListaIndiceAlmacen,pos,RegIndMovimiento);
    seek(me.Datos.Almacen,RegIndMovimiento.PosEnDatos);
    read(me.Datos.Almacen,Reg);
end;

{------------------------------------------------------------------------------}

function ProximoEnLdParcial (var Me:ME_CUENTA; Pos:TPos):TPos;
begin
  ProximoEnLdParcial:= LO_ListaParcialDobleEnlace.Proximo(me.Datos.ListaIndiceAlmacen,pos);
end;

{------------------------------------------------------------------------------}

function PosNula (var Me:ME_CUENTA): TPos;
begin
  PosNula:= Lib_Auxiliar.PosNula;
end;

{------------------------------------------------------------------------------}

END.





















